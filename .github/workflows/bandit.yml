#<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Buenos dÃ­as mi Tikitita ðŸ’–</title>
  <style>
    body {
      margin: 0;
      height: 100vh;
      overflow: hidden;
      background: linear-gradient(to bottom, #ffcce6, #ffe6f2);
      font-family: 'Comic Sans MS', cursive;
      position: relative;
      cursor: pointer;
    }

    h1 {
      text-align: center;
      font-size: 3em;
      color: #ff3399;
      margin-top: 100px;
      text-shadow: 1px 1px 3px #fff;
    }

    .heart {
      width: 20px;
      height: 20px;
      position: absolute;
      background: pink;
      transform: rotate(45deg);
      animation: float 5s linear infinite;
    }

    .heart::before,
    .heart::after {
      content: '';
      width: 20px;
      height: 20px;
      background: pink;
      position: absolute;
      border-radius: 50%;
    }

    .heart::before {
      top: -10px;
      left: 0;
    }

    .heart::after {
      left: -10px;
      top: 0;
    }

    @keyframes float {
      0% {
        transform: translateY(100vh) rotate(45deg);
        opacity: 1;
      }
      100% {
        transform: translateY(-100vh) rotate(45deg);
        opacity: 0;
      }
    }

    .teamo {
      position: absolute;
      top: 0;
      left: 50%;
      transform: translateX(-50%);
      font-size: 2em;
      color: #ff66cc;
      animation: fall 5s linear forwards;
      white-space: nowrap;
      pointer-events: none;
    }

    @keyframes fall {
      0% {
        top: 0;
        opacity: 1;
      }
      100% {
        top: 100vh;
        opacity: 0;
      }
    }
  </style>
</head>
<body onclick="crearCorazon(event);crearTeAmo();">

  <h1>Buenos dÃ­as mi Tikitita ninda ðŸ’–<br>Ti amu muuucho</h1>

  <script>
    function crearCorazon(e) {
      const heart = document.createElement("div");
      heart.className = "heart";
      heart.style.left = `${e.clientX - 10}px`;
      heart.style.top = `${e.clientY - 10}px`;
      heart.style.background = "pink";

      document.body.appendChild(heart);

      setTimeout(() => {
        heart.remove();
      }, 5000);
    }

    function crearTeAmo() {
      for (let i = 0; i < 10; i++) {
        setTimeout(() => {
          const texto = document.createElement("div");
          texto.className = "teamo";
          texto.textContent = "Te amo ðŸ’–";
          texto.style.left = Math.random() * 100 + "vw";
          document.body.appendChild(texto);

          setTimeout(() => {
            texto.remove();
          }, 5000);
        }, i * 200);
      }
    }

    // Corazones flotando constantes
    setInterval(() => {
      const heart = document.createElement("div");
      heart.className = "heart";
      heart.style.left = Math.random() * window.innerWidth + "px";
      heart.style.top = window.innerHeight + "px";
      document.body.appendChild(heart);
      setTimeout(() => heart.remove(), 5000);
    }, 300);
  </script>

</body>
</html> This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Bandit is a security linter designed to find common security issues in Python code.
# This action will run Bandit on your codebase.
# The results of the scan will be found under the Security tab of your repository.

# https://github.com/marketplace/actions/bandit-scan is ISC licensed, by abirismyname
# https://pypi.org/project/bandit/ is Apache v2.0 licensed, by PyCQA

name: Bandit
on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '24 13 * * 5'

jobs:
  bandit:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Bandit Scan
        uses: shundor/python-bandit-scan@ab1d87dfccc5a0ffab88be3aaac6ffe35c10d6cd
        with: # optional arguments
          # exit with 0, even with results found
          exit_zero: true # optional, default is DEFAULT
          # Github token of the repository (automatically created by Github)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information.
          # File or directory to run bandit on
          # path: # optional, default is .
          # Report only issues of a given severity level or higher. Can be LOW, MEDIUM or HIGH. Default is UNDEFINED (everything)
          # level: # optional, default is UNDEFINED
          # Report only issues of a given confidence level or higher. Can be LOW, MEDIUM or HIGH. Default is UNDEFINED (everything)
          # confidence: # optional, default is UNDEFINED
          # comma-separated list of paths (glob patterns supported) to exclude from scan (note that these are in addition to the excluded paths provided in the config file) (default: .svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.eggs,*.egg)
          # excluded_paths: # optional, default is DEFAULT
          # comma-separated list of test IDs to skip
          # skips: # optional, default is DEFAULT
          # path to a .bandit file that supplies command line arguments
          # ini_path: # optional, default is DEFAULT

